name: ML Training Dataset Generation

on:
  # –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 UTC, –ø–æ—Å–ª–µ sync raw –¥–∞–Ω–Ω—ã—Ö)
  schedule:
    - cron: '0 3 * * *'
  
  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å –≤—ã–±–æ—Ä–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        default: 'build_dataset'
        type: choice
        options:
          - build_dataset          # –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏
          - create_ml_tables       # –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ ML —Å—Ö–µ–º—ã –∏ —Ç–∞–±–ª–∏—Ü
          - verify_dataset         # –¢–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
          - get_stats              # –¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          - cleanup                # –û—á–∏—Å—Ç–∫–∞ ML –¥–∞–Ω–Ω—ã—Ö
  
  # –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è raw data sync
  workflow_run:
    workflows: ["ClickHouse Data Sync"]
    types:
      - completed

jobs:
  ml-training-dataset:
    runs-on: ubuntu-latest
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π workflow –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ (–¥–ª—è workflow_run)
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    
    env:
      ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
      ACCESS_KEY_SECRET: ${{ secrets.ACCESS_KEY_SECRET }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Yandex Cloud SSL certificates
        run: |
          echo "üîß Installing Yandex Cloud SSL certificates..."
          sudo mkdir -p /usr/local/share/ca-certificates/Yandex
          sudo wget "https://storage.yandexcloud.net/cloud-certs/RootCA.pem" \
            -O /usr/local/share/ca-certificates/Yandex/RootCA.crt
          sudo wget "https://storage.yandexcloud.net/cloud-certs/IntermediateCA.pem" \
            -O /usr/local/share/ca-certificates/Yandex/IntermediateCA.crt
          sudo chmod 644 /usr/local/share/ca-certificates/Yandex/RootCA.crt
          sudo chmod 644 /usr/local/share/ca-certificates/Yandex/IntermediateCA.crt
          sudo update-ca-certificates
          echo "‚úÖ SSL certificates installed successfully"
      
      - name: Test ClickHouse connection
        run: |
          echo "üîç Testing ClickHouse connection..."
          curl -s --fail \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 1" || {
            echo "‚ùå ClickHouse connection failed"
            exit 1
          }
          echo "‚úÖ ClickHouse connection successful"
      
      - name: Verify raw data availability
        if: github.event.inputs.operation == 'build_dataset' || github.event.inputs.operation == '' || github.event.inputs.operation == 'verify_dataset'
        run: |
          echo "üîç Checking raw data availability..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ raw.match_stats —Ç–∞–±–ª–∏—Ü—ã
          response=$(curl -s -w "%{http_code}" \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT COUNT(*) FROM raw.match_stats" \
            --output raw_count.txt)
          
          if [ "$response" -ne 200 ]; then
            echo "‚ùå Raw data table not accessible"
            exit 1
          fi
          
          raw_count=$(cat raw_count.txt)
          echo "üìä Raw data records: $raw_count"
          
          if [ "$raw_count" -lt 100 ]; then
            echo "‚ö†Ô∏è  Warning: Low number of raw records ($raw_count)"
            echo "Continuing anyway for testing purposes..."
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç—á–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
          response=$(curl -s -w "%{http_code}" \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT COUNT(DISTINCT match_id) FROM raw.match_stats" \
            --output match_count.txt)
          
          match_count=$(cat match_count.txt)
          echo "üìä Unique matches: $match_count"
          
          if [ "$match_count" -lt 20 ]; then
            echo "‚ö†Ô∏è  Warning: Low number of matches ($match_count)"
            echo "This may affect feature generation quality"
          fi
          
          rm -f raw_count.txt match_count.txt
          echo "‚úÖ Raw data verification completed"
      
      - name: Create ML database and schema
        if: github.event.inputs.operation == 'create_ml_tables' || github.event.inputs.operation == 'build_dataset' || github.event.inputs.operation == ''
        run: |
          echo "üèóÔ∏è  Creating ML database..."
          
          curl -s --fail \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "CREATE DATABASE IF NOT EXISTS ml" || {
            echo "‚ùå Failed to create ml database"
            exit 1
          }
          echo "‚úÖ ML database created successfully"
      
      - name: Create training dataset table
        if: github.event.inputs.operation == 'create_ml_tables' || github.event.inputs.operation == 'build_dataset' || github.event.inputs.operation == ''
        run: |
          echo "üèóÔ∏è  Creating training dataset table..."
          
          response=$(curl -s -w "%{http_code}" \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data-binary @data/ml/sql/create_training_dataset.sql \
            --output create_table_result.txt)
          
          echo "HTTP Status: $response"
          echo "Response:"
          cat create_table_result.txt
          
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Training dataset table created successfully"
          else
            echo "‚ùå Failed to create training dataset table"
            rm -f create_table_result.txt
            exit 1
          fi
          
          rm -f create_table_result.txt
      
      - name: Generate team features
        if: github.event.inputs.operation == 'build_dataset' || github.event.inputs.operation == ''
        run: |
          echo "‚öôÔ∏è  Generating team features..."
          echo "This step creates aggregated statistics for teams across different time windows..."
          
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é view –¥–ª—è team features (–ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
          response=$(curl -s -w "%{http_code}" \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "CREATE OR REPLACE VIEW ml.temp_team_features AS $(cat data/ml/sql/generate_team_features.sql)" \
            --output features_result.txt)
          
          echo "HTTP Status: $response"
          echo "Response:"
          head -10 features_result.txt
          
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Team features view created successfully"
          else
            echo "‚ùå Failed to create team features view"
            cat features_result.txt
            rm -f features_result.txt
            exit 1
          fi
          
          rm -f features_result.txt
      
      - name: Generate targets
        if: github.event.inputs.operation == 'build_dataset' || github.event.inputs.operation == ''
        run: |
          echo "üéØ Generating targets..."
          echo "Creating targets for match results, goals, corners, cards, and fouls..."
          
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é view –¥–ª—è targets
          response=$(curl -s -w "%{http_code}" \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "CREATE OR REPLACE VIEW ml.temp_targets AS $(cat data/ml/sql/generate_targets.sql)" \
            --output targets_result.txt)
          
          echo "HTTP Status: $response"
          echo "Response:"
          head -10 targets_result.txt
          
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Targets view created successfully"
          else
            echo "‚ùå Failed to create targets view"
            cat targets_result.txt
            rm -f targets_result.txt
            exit 1
          fi
          
          rm -f targets_result.txt
      
      - name: Build training dataset
        if: github.event.inputs.operation == 'build_dataset' || github.event.inputs.operation == ''
        run: |
          echo "üöÄ Building final training dataset..."
          echo "This may take several minutes for large datasets..."
          
          # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "TRUNCATE TABLE ml.training_dataset"
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π ETL –ø—Ä–æ—Ü–µ—Å—Å
          response=$(curl -s -w "%{http_code}" \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data-binary @data/ml/sql/build_training_dataset.sql \
            --output build_result.txt)
          
          echo "HTTP Status: $response"
          echo "Response:"
          head -20 build_result.txt
          
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Training dataset built successfully"
          else
            echo "‚ùå Failed to build training dataset"
            echo "Full error output:"
            cat build_result.txt
            rm -f build_result.txt
            exit 1
          fi
          
          rm -f build_result.txt
      
      - name: Verify training dataset quality
        if: github.event.inputs.operation == 'build_dataset' || github.event.inputs.operation == '' || github.event.inputs.operation == 'verify_dataset'
        run: |
          echo "üîç Verifying training dataset quality..."
          
          # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          echo "üìä Basic statistics:"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              COUNT(*) as total_records,
              COUNT(DISTINCT match_id) as unique_matches,
              COUNT(DISTINCT home_team_id) as home_teams,
              COUNT(DISTINCT away_team_id) as away_teams,
              MIN(match_date) as earliest_date,
              MAX(match_date) as latest_date
            FROM ml.training_dataset" \
            --output basic_stats.txt
          cat basic_stats.txt
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—è—Ö
          echo "üîç Checking for missing values in key features:"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              countIf(home_team_goals_avg_7 IS NULL) as null_home_goals_7,
              countIf(away_team_goals_avg_7 IS NULL) as null_away_goals_7,
              countIf(target_match_result IS NULL) as null_target_result,
              countIf(target_total_goals_over_2_5 IS NULL) as null_target_total
            FROM ml.training_dataset" \
            --output null_check.txt
          cat null_check.txt
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ç–∞—Ä–≥–µ—Ç–æ–≤
          echo "üéØ Target distribution:"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              'match_result' as target_type,
              target_match_result as value,
              COUNT(*) as count
            FROM ml.training_dataset 
            GROUP BY target_match_result
            ORDER BY target_match_result" \
            --output target_distribution.txt
          cat target_distribution.txt
          
          rm -f basic_stats.txt null_check.txt target_distribution.txt
          echo "‚úÖ Dataset quality verification completed"
      
      - name: Get comprehensive statistics
        if: github.event.inputs.operation == 'build_dataset' || github.event.inputs.operation == '' || github.event.inputs.operation == 'get_stats'
        run: |
          echo "üìà Getting comprehensive training dataset statistics..."
          
          # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          echo "üìä General Statistics:"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              COUNT(*) as total_records,
              COUNT(DISTINCT match_id) as unique_matches,
              COUNT(DISTINCT home_team_id) as unique_home_teams,
              COUNT(DISTINCT away_team_id) as unique_away_teams,
              COUNT(DISTINCT CONCAT(home_team_id, away_team_id)) as unique_team_pairs,
              MIN(match_date) as earliest_match,
              MAX(match_date) as latest_match,
              dateDiff('day', MIN(match_date), MAX(match_date)) as date_range_days
            FROM ml.training_dataset FORMAT Vertical" \
            --output general_stats.txt
          cat general_stats.txt
          
          # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞—Ä–≥–µ—Ç–∞–º
          echo "üéØ Target Statistics (Over 2.5 goals):"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              AVG(target_total_goals_over_2_5) * 100 as pct_over_2_5_goals,
              AVG(target_match_result = 2) * 100 as pct_home_wins,
              AVG(target_match_result = 1) * 100 as pct_draws,
              AVG(target_match_result = 0) * 100 as pct_away_wins,
              AVG(target_corners_over_10_5) * 100 as pct_over_10_5_corners
            FROM ml.training_dataset FORMAT Vertical" \
            --output target_stats.txt
          cat target_stats.txt
          
          # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º
          echo "‚öΩ Feature Statistics (7-match windows):"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              AVG(home_team_goals_avg_7) as avg_home_goals_7,
              AVG(away_team_goals_avg_7) as avg_away_goals_7,
              AVG(home_team_xg_avg_7) as avg_home_xg_7,
              AVG(away_team_xg_avg_7) as avg_away_xg_7,
              AVG(diff_goals_avg_7) as avg_goal_difference_7,
              AVG(home_team_form_7) as avg_home_form_7,
              AVG(away_team_form_7) as avg_away_form_7
            FROM ml.training_dataset FORMAT Vertical" \
            --output feature_stats.txt
          cat feature_stats.txt
          
          rm -f general_stats.txt target_stats.txt feature_stats.txt
          echo "‚úÖ Comprehensive statistics completed"
      
      - name: Cleanup temporary views
        if: always() && (github.event.inputs.operation == 'build_dataset' || github.event.inputs.operation == '' || github.event.inputs.operation == 'cleanup')
        run: |
          echo "üßπ Cleaning up temporary views..."
          
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "DROP VIEW IF EXISTS ml.temp_team_features"
          
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "DROP VIEW IF EXISTS ml.temp_targets"
          
          echo "‚úÖ Cleanup completed"
      
      - name: Cleanup ML data (manual operation)
        if: github.event.inputs.operation == 'cleanup'
        run: |
          echo "üóëÔ∏è  Performing ML data cleanup..."
          
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "TRUNCATE TABLE IF EXISTS ml.training_dataset"
          
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "DROP TABLE IF EXISTS ml.training_dataset"
          
          echo "‚ö†Ô∏è  ML training dataset has been completely removed"
      
      - name: Final success notification
        if: success() && (github.event.inputs.operation == 'build_dataset' || github.event.inputs.operation == '')
        run: |
          echo "üéâ ML Training Dataset Generation completed successfully!"
          echo "üìä Dataset is ready for machine learning workflows"
          echo "üîó Next steps:"
          echo "   - Export data for model training"
          echo "   - Validate feature engineering results"
          echo "   - Begin model development and experimentation"