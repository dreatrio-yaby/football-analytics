name: ML Training Dataset - Simple

on:
  # –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00 UTC, –ø–æ—Å–ª–µ sync raw –¥–∞–Ω–Ω—ã—Ö)
  schedule:
    - cron: '0 3 * * *'
  
  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        default: 'build'
        type: choice
        options:
          - build           # –°–æ–∑–¥–∞—Ç—å –æ–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É
          - verify          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
          - cleanup         # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
  
  # –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è raw data sync
  workflow_run:
    workflows: ["ClickHouse Data Sync"]
    types:
      - completed

jobs:
  ml-training-dataset:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Yandex Cloud SSL certificates
        run: |
          echo "üîß Installing Yandex Cloud SSL certificates..."
          sudo mkdir -p /usr/local/share/ca-certificates/Yandex
          sudo wget "https://storage.yandexcloud.net/cloud-certs/RootCA.pem" \
            -O /usr/local/share/ca-certificates/Yandex/RootCA.crt
          sudo wget "https://storage.yandexcloud.net/cloud-certs/IntermediateCA.pem" \
            -O /usr/local/share/ca-certificates/Yandex/IntermediateCA.crt
          sudo chmod 644 /usr/local/share/ca-certificates/Yandex/RootCA.crt
          sudo chmod 644 /usr/local/share/ca-certificates/Yandex/IntermediateCA.crt
          sudo update-ca-certificates
          echo "‚úÖ SSL certificates installed"
      
      - name: Test ClickHouse connection
        run: |
          echo "üîç Testing ClickHouse connection..."
          curl -s --fail \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 1" || {
            echo "‚ùå ClickHouse connection failed"
            exit 1
          }
          echo "‚úÖ ClickHouse connection successful"
      
      - name: Verify raw data
        if: github.event.inputs.operation == 'build' || github.event.inputs.operation == '' || github.event.inputs.operation == 'verify'
        run: |
          echo "üîç Checking raw data availability..."
          
          response=$(curl -s -w "%{http_code}" \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT COUNT(*) as total, COUNT(DISTINCT match_id) as matches FROM raw.match_stats" \
            --output raw_stats.txt)
          
          echo "üìä Raw data stats:"
          cat raw_stats.txt
          
          if [ "$response" -ne 200 ]; then
            echo "‚ùå Cannot access raw data"
            exit 1
          fi
          
          echo "‚úÖ Raw data verification completed"
          rm -f raw_stats.txt
      
      - name: Build training dataset
        if: github.event.inputs.operation == 'build' || github.event.inputs.operation == ''
        run: |
          echo "üöÄ Building training dataset with ClickHouse window functions..."
          echo "This creates ml.training_dataset table with features and targets"
          
          response=$(curl -s -w "%{http_code}" \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data-binary @data/ml/sql/build_training_dataset.sql \
            --output build_result.txt)
          
          echo "HTTP Status: $response"
          echo "Response:"
          head -20 build_result.txt
          
          if [ "$response" -eq 200 ]; then
            echo "‚úÖ Training dataset built successfully"
          else
            echo "‚ùå Failed to build training dataset"
            echo "Full error:"
            cat build_result.txt
            rm -f build_result.txt
            exit 1
          fi
          
          rm -f build_result.txt
      
      - name: Verify dataset quality
        if: github.event.inputs.operation == 'build' || github.event.inputs.operation == '' || github.event.inputs.operation == 'verify'
        run: |
          echo "üîç Verifying training dataset quality..."
          
          # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          echo "üìä Basic Statistics:"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              COUNT(*) as total_records,
              COUNT(DISTINCT match_id) as unique_matches,
              COUNT(DISTINCT home_team_id) as home_teams,
              COUNT(DISTINCT away_team_id) as away_teams,
              MIN(match_date) as earliest_date,
              MAX(match_date) as latest_date
            FROM ml.training_dataset FORMAT Vertical"
          
          echo ""
          echo "üéØ Target Distribution:"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              'match_result' as target,
              target_match_result as value,
              COUNT(*) as count,
              ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM ml.training_dataset), 1) as percentage
            FROM ml.training_dataset 
            GROUP BY target_match_result 
            ORDER BY target_match_result FORMAT PrettyCompact"
          
          echo ""
          echo "‚öΩ Goals Totals:"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              ROUND(AVG(target_total_goals_over_1_5) * 100, 1) as pct_over_1_5,
              ROUND(AVG(target_total_goals_over_2_5) * 100, 1) as pct_over_2_5,
              ROUND(AVG(target_total_goals_over_3_5) * 100, 1) as pct_over_3_5
            FROM ml.training_dataset FORMAT Vertical"
          
          echo ""
          echo "üìà Feature Quality Check:"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              countIf(home_goals_avg_7 IS NULL) as null_home_goals,
              countIf(away_goals_avg_7 IS NULL) as null_away_goals,
              countIf(home_goals_avg_7 < 0) as negative_home_goals,
              countIf(away_goals_avg_7 < 0) as negative_away_goals,
              ROUND(AVG(home_goals_avg_7), 2) as avg_home_goals_7,
              ROUND(AVG(away_goals_avg_7), 2) as avg_away_goals_7
            FROM ml.training_dataset FORMAT Vertical"
          
          echo "‚úÖ Dataset quality verification completed"
      
      - name: Cleanup ML data
        if: github.event.inputs.operation == 'cleanup'
        run: |
          echo "üóëÔ∏è  Cleaning up ML training dataset..."
          
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "DROP TABLE IF EXISTS ml.training_dataset"
          
          echo "‚úÖ ML training dataset cleaned up"
      
      - name: Success summary
        if: success() && (github.event.inputs.operation == 'build' || github.event.inputs.operation == '')
        run: |
          echo "üéâ ML Training Dataset Generation completed successfully!"
          echo ""
          echo "üìä Quick Stats:"
          curl -s \
            "https://${{ secrets.CLICKHOUSE_HOST }}:8443/" \
            --user "${{ secrets.CLICKHOUSE_USER }}:${{ secrets.CLICKHOUSE_PASSWORD }}" \
            --data "SELECT 
              COUNT(*) as records,
              COUNT(DISTINCT match_id) as matches,
              ROUND(AVG(target_total_goals_over_2_5) * 100, 1) as pct_over_2_5_goals
            FROM ml.training_dataset"
          echo ""
          echo "üîó Dataset ready at: ml.training_dataset"
          echo "üìù Use SQL queries to explore and export data for ML models"